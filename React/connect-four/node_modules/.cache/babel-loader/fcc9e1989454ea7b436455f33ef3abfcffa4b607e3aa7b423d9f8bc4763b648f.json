{"ast":null,"code":"var _jsxFileName = \"/Users/zsuzsi/Documents/GitHub/JavaScript_Practice/React/connect-four/src/components/Board/Board.tsx\";\nimport React from \"react\";\nimport Column from \"../Column/Column\";\nimport styles from \"./Board.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Board extends React.PureComponent {\n  renderColumns() {\n    const {\n      columns,\n      rows,\n      chipPositions,\n      onTileClick\n    } = this.props;\n    const columnsComponents = []; //An empty array is initialized to store the rendered Column components, which will represent the individual columns on the game board.\n\n    for (let column = 0; column < columns; column++) {\n      //we create multiple columns, passing the required information to them\n      columnsComponents.push(/*#__PURE__*/_jsxDEV(Column, {\n        column: column //the current column number\n        ,\n        rows: rows //the number of rows in each column\n        ,\n        chipsPositions: chipPositions //the object holding the positions of chips on the board\n        ,\n        onTileClick: onTileClick //The click handler function for when a tile inside the column is clicked.\n      }, column, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: columnsComponents\n    }, void 0, false); //after all the Column components have been created and added to columnsComponents, the method returns a React Fragment which is used to group multiple elements together without adding extra DOM elements like a <div>\n    //we are using the shorthand “<></>” for React.Fragment, which is an equivalent of “<React.Fragment></React.Fragment>”.\n  }\n  render() {\n    //this render() method returns the component's JSX\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.board,\n      children: this.renderColumns()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }, this); //<div className={styles.board}>: The root div is rendered with a CSS class from the component's CSS Module. Inside the <div>, the renderColumns() method is called. This method generates\n    //and returns all the Column components that make up the board.\n  }\n}","map":{"version":3,"names":["React","Column","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","PureComponent","renderColumns","columns","rows","chipPositions","onTileClick","props","columnsComponents","column","push","chipsPositions","fileName","_jsxFileName","lineNumber","columnNumber","children","render","className","board"],"sources":["/Users/zsuzsi/Documents/GitHub/JavaScript_Practice/React/connect-four/src/components/Board/Board.tsx"],"sourcesContent":["import React from \"react\";\nimport Column from \"../Column/Column\";\nimport styles from \"./Board.module.css\";\nimport { Props } from \"./types\";\n\nexport default class Board extends React.PureComponent<Props> {\n\n    renderColumns() {\n        const { columns, rows, chipPositions, onTileClick } = this.props;\n        const columnsComponents = []; //An empty array is initialized to store the rendered Column components, which will represent the individual columns on the game board.\n\n        for (let column = 0; column < columns; column++) { //we create multiple columns, passing the required information to them\n            columnsComponents.push(\n                <Column\n                    key={column}\n                    column={column} //the current column number\n                    rows={rows} //the number of rows in each column\n                    chipsPositions={chipPositions} //the object holding the positions of chips on the board\n                    onTileClick={onTileClick} //The click handler function for when a tile inside the column is clicked.\n                />\n            );\n        }\n        return <>{columnsComponents}</>; //after all the Column components have been created and added to columnsComponents, the method returns a React Fragment which is used to group multiple elements together without adding extra DOM elements like a <div>\n        //we are using the shorthand “<></>” for React.Fragment, which is an equivalent of “<React.Fragment></React.Fragment>”.\n    }\n    render() { //this render() method returns the component's JSX\n        return <div className={styles.board}>{this.renderColumns()}</div> //<div className={styles.board}>: The root div is rendered with a CSS class from the component's CSS Module. Inside the <div>, the renderColumns() method is called. This method generates\n        //and returns all the Column components that make up the board.\n    }\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAOC,MAAM,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGxC,eAAe,MAAMC,KAAK,SAASP,KAAK,CAACQ,aAAa,CAAQ;EAE1DC,aAAaA,CAAA,EAAG;IACZ,MAAM;MAAEC,OAAO;MAAEC,IAAI;MAAEC,aAAa;MAAEC;IAAY,CAAC,GAAG,IAAI,CAACC,KAAK;IAChE,MAAMC,iBAAiB,GAAG,EAAE,CAAC,CAAC;;IAE9B,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGN,OAAO,EAAEM,MAAM,EAAE,EAAE;MAAE;MAC/CD,iBAAiB,CAACE,IAAI,cAClBb,OAAA,CAACH,MAAM;QAEHe,MAAM,EAAEA,MAAO,CAAC;QAAA;QAChBL,IAAI,EAAEA,IAAK,CAAC;QAAA;QACZO,cAAc,EAAEN,aAAc,CAAC;QAAA;QAC/BC,WAAW,EAAEA,WAAY,CAAC;MAAA,GAJrBG,MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKd,CACL,CAAC;IACL;IACA,oBAAOlB,OAAA,CAAAE,SAAA;MAAAiB,QAAA,EAAGR;IAAiB,gBAAG,CAAC,CAAC,CAAC;IACjC;EACJ;EACAS,MAAMA,CAAA,EAAG;IAAE;IACP,oBAAOpB,OAAA;MAAKqB,SAAS,EAAEvB,MAAM,CAACwB,KAAM;MAAAH,QAAA,EAAE,IAAI,CAACd,aAAa,CAAC;IAAC;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAAC;IAClE;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}